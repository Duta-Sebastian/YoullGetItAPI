name: You'll Get It User API deployment
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: false

      - name: Install dependencies
        run: |
          go mod tidy
          go mod download

      - name: Build application
        run: go build -o youllgetit_user_API .

      - name: Prepare SSH Environment
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          # Create SSH directory with secure permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Securely write SSH private key
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add server to known hosts
          ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Stop Existing Application
        continue-on-error: true
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          ssh -o ConnectTimeout=10 -i ~/.ssh/id_rsa $SERVER_USER@$SERVER_HOST "pkill -f youllgetit_user_API || echo 'No existing process found'"
          sleep 5

      - name: Transfer Application Binary
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          scp -o ConnectTimeout=30 -i ~/.ssh/id_rsa youllgetit_user_API $SERVER_USER@$SERVER_HOST:~/youllgetit_user_API

      - name: Create .env file
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          ENV_FILE_CONTENTS: ${{ secrets.ENV_FILE_CONTENTS }}
        run: |
          ssh -i ~/.ssh/id_rsa $SERVER_USER@$SERVER_HOST "cat > ~/.env << 'EOL'
          $ENV_FILE_CONTENTS
          EOL"

      - name: Start Application
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          ssh -i ~/.ssh/id_rsa $SERVER_USER@$SERVER_HOST "chmod +x ~/youllgetit_user_API && \
          cd ~ && \
          (nohup ./youllgetit_user_API > ./youllgetit_user_API.log 2>&1 &) && \
          echo 'Application started in background' && \
          exit"

      - name: Verify Deployment
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          ssh -o ConnectTimeout=10 -i ~/.ssh/id_rsa $SERVER_USER@$SERVER_HOST "if pgrep -f youllgetit_user_API > /dev/null; then \
            echo 'Application is running successfully'; \
            exit 0; \
          else \
            echo 'ERROR: Application failed to start'; \
            tail -n 50 ~/youllgetit_user_API.log; \
            exit 1; \
          fi"